export class TranslationTopic {
    constructor(options) {
        this.options = options;
        this.translators = new Map();
        this.setTranslator = (name, translator) => {
            this.translators.set(name, translator);
        };
        this.removeTranslator = (name) => {
            this.translators.delete(name);
        };
        this.i18next = options.i18next;
        if (options.translators) {
            Object.entries(options.translators).forEach(([name, translator]) => {
                this.setTranslator(name, translator);
            });
        }
    }
}
const forwardTranslation = ({ value }) => value;
export class TranslationBuilder {
    constructor(i18next) {
        this.i18next = i18next;
        this.topics = new Map();
        this.registerTopic = (name, Topic) => {
            const topic = new Topic({ i18next: this.i18next });
            this.topics.set(name, topic);
            this.i18next.use({
                name,
                process: (value, key, options) => {
                    const topic = this.topics.get(name);
                    if (!topic)
                        return value;
                    return topic.translate(value, key, options);
                },
                type: 'postProcessor',
            });
            return topic;
        };
        this.disableTopic = (topicName) => {
            const topic = this.topics.get(topicName);
            if (!topic)
                return;
            this.i18next.use({
                name: topicName,
                process: forwardTranslation,
                type: 'postProcessor',
            });
            this.topics.delete(topicName);
        };
        this.getTopic = (topicName) => this.topics.get(topicName);
    }
    registerTranslators(topicName, translators) {
        const topic = this.getTopic(topicName);
        if (!topic)
            return;
        Object.entries(translators).forEach(([name, translator]) => {
            topic.setTranslator(name, translator);
        });
    }
    removeTranslators(topicName, translators) {
        const topic = this.getTopic(topicName);
        if (!topic)
            return;
        translators.forEach((name) => {
            topic.removeTranslator(name);
        });
    }
}
